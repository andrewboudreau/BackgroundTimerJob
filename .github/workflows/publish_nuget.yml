name: Publish NuGet Package

on:
  push:
    tags:
      - 'v*.*.*'     # This triggers on version tags like v1.0.0, v1.2.3, etc.
  workflow_dispatch: # Allows manual dispatch from the GitHub Actions UI.

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'  # Or whichever version of .NET you use

      # [Optional] If you are strong-naming (SNK) or code-signing (PFX):
      # decode your .snk/.pfx from a base64 secret stored in SIGNING_KEY
      #
      # - name: Create signing key file
      #   if: secrets.SIGNING_KEY != ''
      #   run: |
      #     echo "$SIGNING_KEY" | base64 --decode > mykey.snk
      #     # For .pfx, do the same but name it .pfx instead of .snk
      #
      # Then pass it to msbuild or specify it in the .csproj

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Pack
        run: dotnet pack --configuration Release --no-build --output ./artifacts

      # Extract version number from tag (assuming tags like v9.0.1)
      - name: Extract version number from tag
        id: extract_version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Ensure csproj version matches tag version
        run: |
            # Extract the version from the tag (assuming tag is formatted as "v9.0.1")
            TAG_VERSION=${GITHUB_REF#refs/tags/v}
            echo "Tag version: $TAG_VERSION"
            
            # Extract the Version property from the csproj file using grep & sed (adjust the file name if needed)
            CSPROJ_VERSION=$(grep -oP '(?<=<Version>)[^<]+' ./src/BackgroundTimerJob.csproj)
            echo "csproj version: $CSPROJ_VERSION"
    
            if [ "$TAG_VERSION" != "$CSPROJ_VERSION" ]; then
                echo "Error: Tag version ($TAG_VERSION) does not match csproj version ($CSPROJ_VERSION)."
                exit 1
            fi
            shell: bash

      - name: Publish package to NuGet
        if: github.ref_type == 'tag'
        run: |
          dotnet nuget push "./artifacts/*.nupkg" \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
      
      # Upload the NuGet package as a release asset using the version number if needed.
      - name: Upload NuGet Package as Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/BackgroundTimerJob.${{ steps.extract_version.outputs.version }}.nupkg
          asset_name: BackgroundTimerJob.${{ steps.extract_version.outputs.version }}.nupkg
          asset_content_type: application/octet-stream